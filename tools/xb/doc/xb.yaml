title: TI Extended Basic for the TI-99/4 Home computer
author: Robert E. Whitsitt, II and other staff members of the Texas Instruments Learning Center and the Texas Instruments Personal Computer Division
copyright: (c) 1981 Texas Instruments Incorporated
disclaimer: This work is reproduced here in a structured form for easier reference and is provided as-is with no guarantee.
keywords:
    ABS:
        format: ABS(numeric expression)
        description: |
            The `ABS` function gives the absolute value of *numeric-expression*. If
            *numeric-expression* is positive, `ABS` gives the value of numeric expressior. If
            *numeric-expression* is negative, `ABS` gives its negative (a positive number). If
            *numeric-expression* is zero, `ABS` returns zero. The result of `ABS` is always a
            non-negative number.
        examples: |
            ```xb
            100 PRINT ABS(42,3)
            ```

            `PRINT ABS(42.3)` prints `42.3`.

            ```xb
            100 VV=ABS(-6.124)
            ```

            `VV = ABS(-6.124)` sets `VV` equal to `6.124`.
    ACCEPT:
        format: |
            ACCEPT | [AT(row, column)] (VALIDATE(datatype, ...)] [BEEP]
            [ERASE ALL] [SIZE(numeric-expression)] :] variable
        description: |
            The `ACCEPT` statement suspends program execution until data is entered
            from tne keyboard. Many options are available with `ACCEPT`, making it far
            more versatile than `INPUT`. It may accept data at any screen position, make
            an audible tone (beep) when ready to accept the data, erase all characters on
            the screen before accepting data, limit data accepted to a certain number of
            characters, and limit the type of characters accepted.
        options: |
            The following options may appear in any order following `ACCEPT`.

            * `AT(row, column)` places the beginning of the input field at the specified row
            and column. Rows are numbered 1 through 24. Columns are numbered 1
            through 28 with column 1 corresponding to what is called column 3 in the
            `VCHAR`, `HCHAR`, and `GCHAR` subprograms.

            * `VALIDATE (data-type, ...)` allows only certain characters to be entered. *Data-
            type* specifies which characters are acceptable. If more than one data-type is
            specified, a character from any of the data-types given is acceptable. The
            following are the data-types.

                * `UALPHA` permits all uppercase alphabetic characters.
                * `DIGIT` permits 0 through 9.
                * `NUMERIC` permits 0 through 9, ".", "+", "-", and "E".
                * *String-expression* permits the characters contained in *string-expression*.

            * `BEEP` sounds a short tone to signal that the computer is ready to accept
            input.

            * `ERASE ALL` fills the entire screen with the blank character before accepting
            input.

            * `SIZE(numeric-expression)` allows up to the absolute value of *numeric-
            expression* characters to be input. if *numeric-expression* is positive, the field
            in which the data is entered is cleared before input is accepted. If *numeric-
            expression* is negative, the input field is not blanked. This allows a default
            value to be previously placed in the field and entered by just pressing `ENTER`.
            If there is no `SIZE` clause, the line is blanked from the beginning position to
            the end of the line.

            If the `ACCEPT` statement is used without the AT clause, the last two
            characters on the screen (at the lower right) are changed to "edge
            characters" (ASCII code 31).
        examples: |
            ```xb
            100 ACCEPT AT(5,7):Y
            ```
            `ACCEPT AT(5,7):Y` accepts data at the fifth row, seventh column of the screen into the variable Y.
            
            ```xb
            100 ACCEPT VALIDATE("YN"):R$
            ```
            `ACCEPT VALIDATE("YN"):R$` accepts Y or N into the variable `R$`.

            ```xb
            100 ACCEPT ERASE ALL:B
            ```
            `ACCEPT ERASE ALL:B` accepts data into the variable B afler putting the blank character
            into all screen positions.

            ```xb
            100 ACCEPT AT(R,C)SIZE(FIELDLEN)BEEP VALIDATE(DIGIT,"AYN"):X$
            ```
            `ACCEPT AT(R,C)SIZE(FIELDLEN)BEEP VALIDATE(DIGIT,"AYN"):X$` accepts a digit
            or the letters A, Y, or N into the variable `X$`. The length of the input may be up to `FIELDLEN`
            characters. The data is accepted at row `R`, column `C`, and a beep is sounded
            before data is accepted.
        program: |
            This program illustrates a typical use of ACCEPT. It allows entry of up to 20 names and
            addresses, and then displays them all.

            ```xb
            100 DIM NAME$(20),ADDR$(20)
            110 DISPLAY AT(5,1)ERASE ALL:"NAME:"
            120 DISPLAY AT(7,1):"ADDRESS:"
            130 DISPLAY AT(23,1):"TYPE A ? TO END ENTRY."
            140 FOR S=1 TO 20
            150 ACCEPT AT(5,7)VALIDATE (UALPHA,"?")BEEP SIZE(13):NAME$(S)
            160 IF NAME$(S)="?" THEN 200
            170 ACCEPT AT(7,10)SIZE(12):ADDR$(S)
            180 DISPLAY AT(7,10):"      "
            190 NEXT S
            200 CALL CLEAR
            210 DISPLAY AT(1,1):"NAME","ADDRESS"
            220 FOR T=1 TO S-1
            230 DISPLAY AT(T+2,1):NAME$(T),ADDR$(T)
            240 NEXT T
            250 GOTO 250
            ```

            (press **SHIFT C** to stop the program.)
    ASC:
        format: ASC(string-expression)
        description: |
            The `ASC` function gives the ASCII character code which corresponds to the
            first character of *string-expression*. A list of the ASCII codes is given in
            [Appendix C](#Appendix%20C). The `ASC` function is the inverse of the [`CHRS$`](#CHR$) function.
        examples: |
            ```xb
            100 PRINT ASC("A")
            ```
            `PRINT ASC("A")` prints 65.

            ```xb
            100 B=ASC("1")
            ```
            `B=ASC("1")` sets `B` equal to 49.

            ```xb
            100 DISPLAY ASC('HELLO‚Äù)
            ```
            `DISPLAY ASC("HELLO")` displays 72.
    ATN:
        format: ATN(numeric-expression)
        description: |
            The `ATN` function returns the measure of the angle (in radians) whose
            tangent is *numeric-expression*. If you want the equivalent angle in degrees,
            multiply by `180/PI`. The value given by the `ATN` function is always in the
            range `-PI/2 < ATN(X) < PI/2`.
        examples: |
            ```xb
            100 PRINT ATN(O)
            ```
            `PRINT ATN(Q)` prints `Q`.

            ```xb
            100 Q=ATN(.44)
            ```
            `Q=ATN(.44)` sets `Q` equal to `0.4145068746`.
    BREAK:
        format: BREAK [line-number-list]
        description: |
            The `BREAK` command requires a *line-number-list*. It causes the program to
            stop immediately before the lines in *line-number-list* are executed. After a
            breakpoint is taken because the line is listed in *ine-number-list*, the
            breakpoint is removed and no more breakpoints occur at that line unless a
            new `BREAK` command or statement is given.

            The `BREAK` statement without *line-number-list* causes the program to stop
            when it is encountered. The line at which the program stops is called a
            breakpoint. Every time a `BREAK` statement without *line-number-list* is
            encountered, the program stops even if an [`ON BREAK NEXT`](#ON%20BREAK%20NEXT)
            statement has been executed.

            You can also cause a breakpoint in a program by pressing `SHIFT+C` (`CLEAR`)
            while the program is running, unless breakpoints are being handled in some
            other way because of the action of [`ON BREAK`](#ON%20BREAK).

            `BREAK` is useful in finding out why a program is not running exactly as you
            expect it to. When the program has stopped you can print values of variables
            to find out what is happening in the program. You may enter any command
            or statement that can be used as a command. If you edit the program,
            however, you cannot resume with [`CONTINUE`](#CONTINUE).

            A way to remove breakpoints set with `BREAK` followed by line numbers is
            the [`UNBREAK`](#UNBREAK) command. Also, if a breakpoint is set at a program
            line and that line is deleted, the breakpoint is removed. Breakpoints are also
            removed when a program is saved with the [`SAVE`](#SAVE) command. See
            [`ON BREAK`](#ON%20BREAK) for a way to handle breakpoints.

            Whenever a breakpoint occurs, the standard character set is restored. Thus
            any standard characters that had been redefined by [`CALL CHAR`](#CALL%20CHAR)
            are restored to the standard characters. A breakpoint also restores the standard
            colors, deletes sprites, and resets sprite magnification to the default value
            of 1.
        options: |
            The *line-number-list* is optional when `BREAK` is used as a statement, but is
            required when `BREAK` is used as a command. When present, it causes the
            program to stop immediately before the lines in *line-number-list* are
            exccuted. After a breakpoint is taken because the line is listed in
            *line-number-list*, the breakpoint is removed and no more breakpoints occur at
            that line unless a new `BREAK` command or statement is given.
        examples: |
            ```xb
            150 BREAK
            ```
            `BREAK` as a statement causes a breakpoint when that statement is executed.

            ```xb
            110 BREAK 120,130
            ```
            `BREAK 120,130` as a statement causes breakpoints before execution of the line
            numbers listed.

            ```xb
            BREAK 200,300,1105
            ```
            `BREAK 200,300,1105` as a command causes breakpoints before execution of the
            line numbers listed.
    BYE:
        format: BYE
        description: |
            The `BYE` command ends TI Extended BASIC and returns the computer to
            the master title screen. All open files are closed, all program lines are erased
            and the computer is reset. Always use the `BYE` command instead of `SHIFT Q`
            (`QUIT`) to leave TI Extended BASIC. `SHIFT Q` (`QUIT`) does not close files, which
            may result in data being lost from external devices.
    CALL:
        format: CALL subprogram-name [(parameter-list)]
        description: |
            The `CALL` statement transfers control to *subprogram-name*. The
            subprogram may be either one built into TI Extended BASIC, such as
            [`CLEAR`](#CLEAR%20subprogram), or one you have written. After the subprogram is executed. the next
            statement after the `CALL` statement is executed. `CALL` may be either a
            statement or a command for calling built-in TI Extended BASIC
            subprograms, but must be a statement when calling subprograms that you
            write.
        options: |
            The *parameter-list* is defined according to the subprogram you are calling.
            Some require no parameters at all. some require parameters, and some have
            optional parameters. Each built-in subprogram is discussed under its own
            entry in this manual. The subprograms you can write are discussed in [the
            section in Chapter II on subprograms](#subprograms) and under [`SUB`](#SUB).
            The following are the subprogram names of the built-in TI Extended BASIC subprograms:

            `CHAR HCHAR PATTERN CHARPAT INIT PEEK CHARSET JOYST POSITION CLEAR KEY SAY COINC LINK
            SCREEN COLOR LOAD SOUND DELSPRITE LOCATE SPGET DISTANCE MAGNIFY SPRITE ERR MOTION
            VCHAR GCHAR VERSION`
        program: |
            This program illustrates the use of `CALL` with a supplied subprogram
            ([`CLEAR`](#CLEAR%20subprogram)) in line 100 and the use of a written subprogram
            (`TIMES`) in line 120.

            ```xb
            100 CALL CLEAR
            110 X=4
            120 CALL TIMES(X)
            130 PRINT X
            140 STOP
            200 SUB TIMES(Z)
            210 Z=Z*PI
            220 SUBEND
            ```

            Screen clears and displays `12.56637061`
    CHAR subprogram:
        format: CALL CHAR(character-code, pattern-identifier [,...] )
        description: |
            The `CHAR` subprogram allows you to define special graphics characters. You
            can redefine the standard set of characters (ASCII codes 32-95) and the
            undefined characters, ASCII codes 96-143. Note that fewer program defined
            characters are available in TI Extended BASIC tran in Ti BASIC, where
            ASCH codes 96-156 are allowed. The `CHAR` subprogram is the inverse of the
            [`CHARPAT`](#CHARPAT) subprogram.

            *Character-code* specities the character which you wish to define and must be
            a numeric expression with a value from 32 through 143. *Pattern-identifier* is
            a O through 64 character string expression which specifies the pattern of the
            character(s) you are defining. This string expression is a coded representation
            of the dots which make up a character on the screen.

            Each character is made up of 64 dots comprising an 8 by 8 grid as shown
            below.

            ```hex
                  | LEFT BLOCKS | RIGHT BLOCKS
            ----------
            ROW 1 | 0 | 0
            ROW 2 | 0 | 0
            ROW 3 | 0 | 0
            ROW 4 | 0 | 0
            ROW 5 | 0 | 0
            ROW 6 | 0 | 0
            ROW 7 | 0 | 0
            ROW 8 | 0 | 0
            ```

            Each row is partitioned into two blocks of four dots each.

            Each character in the *pattern-identifier* describes the pattern in one block of
            one row. The rows are described from left to right and from top to bottom.
            Therefore the first two characters in the *pattern-identifier* describe the
            pattern for row one of the grid, the next two the second row, and so on.

            Characters are created by turning some dots "on" and leaving others "off".
            The space character (ASCII code 32) is a character with all the dots turned
            "off". Turning all the dots "on" produces a solid block. The color of the on
            dots is the foreground color. The color of the off dots is the background color.

            All the standard characters are set with the appropriate dots on. To create a
            new character, you specify what dots to turn on and leave off. In the
            computer a binary code, one number for each of the 64 dots, is used to
            specify which dots are on and off in a particular block. A more human-
            readable form of binary is hexadecimal. The following table shows all the
            possible on/off conditions for the four dots in a given block, and the binary
            and hexadecimal codes for each condition.

            ```hex
            Binary | BLOCK, hex & decimal
            -----------
            0000 | 0
            0001 | 1
            0010 | 2
            0011 | 3
            0100 | 4
            0101 | 5
            0110 | 6
            0111 | 7
            1000 | 8
            1001 | 9
            1010 | A
            1011 | B
            1100 | C
            1101 | D
            1110 | E
            1111 | F
            ```

            If the *pattern-identifier* is less than 16 characters, the computer assumes
            that the remaining characters are zeros. If the *pattern-identifier* is 17 to 32
            characters, two character-codes are defined, the first with the first through
            sixteenth characters and the second with the remaining characters, with
            zeros added as needed. If the *pattern-identifier* is 33 to 48 characters, three
            character-codes are defined. the first with the first through sixteenth
            characters, the second with the seventeenth through thirty-second
            characters, and the third with the remaining characters, with zeros added as
            needed. If the *pattern-identifier* is 49 to 64 characters, four character-codes
            are defined, the first with the first through sixteenth characters, the second
            with the seventeenth through thirty-second characters, the third with the
            thirty-third through forty-eighth characters, and the fourth with the
            remaining characters, with zeros added as needed. If the *pattern-identifier* is
            longer than 64 characters or is long enough to define characters higher than
            character code 143, the excess is ignored.
        program: |
            To describe the dot pattern pictured below, you code this string for `CALL CHAR`:
            `"1898FF3D3C3CE404"`.

            ```hex
            | BLOCKS and codes
            --------
            ROW 1 | 18
            ROW 2 | 98
            ROW 3 | FF
            ROW 4 | 3D
            ROW 5 | 3C
            ROW 6 | 3C
            ROW 7 | E4
            ROW 8 | 04
            ```

            This program uses this and one other string to make a figure "dance".

            ```xb
            100 CALL CLEAR
            110 A$="1898FF3D3C3CE404"
            120 B$="1819FFBC3C3C2720"
            130 CALL COLOR(9,7,12)
            140 CALL VCHAR(12,16,96)
            150 CALL CHAR(96,A$)
            160 GOSUB 200
            170 CALL CHAR(96,B$)
            180 GOSUB 200
            190 GOTO 150
            200 FOR DELAY=1 to 50
            210 NEXT DELAY
            220 RETURN
            ```

            The program clears the screen and moves the character (press `SHIFT C` to stop the program).
            
            If a program stops for a breakpoint, the predefined characters (ASCII codes
            32 through 95) are reset to their standard pattern. Those with codes 96 through
            143 keep their program defined pattern. When the program ends normally or
            because of an error, all predefined charaters are reset.

            ```xb
            100 CALL CLEAR
            110 CALL CHAR(96,"FFFFFFFFFFFFFFFF")
            120 CALL CHAR(42,"0F0F0F0F0F0F0F0F")
            130 CALL HCHAR(12,17,42)
            140 CALL VCHAR(14,17,96)
            150 FOR DELAY=1 TO 500
            160 NEXT DELAY
            ```
    CHARPAT subprogram:
        format: CALL CHARPAT(character-code, string-variable |,...]
        description: |
            The `CHARPAT` subprogram returns in *string-variable* the 16-character
            pattern identifier that specifies the pattern of *character-code*. The `CHARPAT`
            subprogram is the inverse of the [`CHAR` subprogram](#CHAR%20subprogram).
            See the [`CHAR` subprogram](#CHAR%20subprogram) for an explanation of the value
            returned in *string-variable*.
        examples: |
            ```xb
            100 CALL CHARPAT(33,C$)
            ```

            `CALL CHARPAT(33,C$)` sets `C$` equal to `"0010101010001000"`, the pattern
            identifier for character 33, the exclamation point.

            ```hex
            |00
            |10
            |10
            |10
            |10
            |00
            |10
            |00
            ```
    CHARSET subprogram:
        format: CALL CHARSET
        description: |
            The `CHARSET` subprogram restores the standard character patterns and
            standard colors for characters 32 through 95. Normally when a program is
            run by another program using `RUN` as a statement, characters 32 through
            95 are not reset to their standard patterns and colors. `CHARSET` is useful
            when this feature is not desired.
        examples: |
            ```xb
            100 CALL CHARSET
            ```
            `CALL CHARSET` restores the standard characters and their colors.
    CHR$:
        format: CHR$(numeric-expression)
        description: |
            The `CHR$` function returns the character corresponding to the ASCII
            character code specified by *numeric-expression*. The `CHR$` function is the
            inverse of the [`ASC`](#ASC) function. A list of the ASCII character codes for each
            character in the standard character set is given in [Appendix C](#Appendix%20C).
        examples: |
            ```xb
            100 PRINT CHR$(72)
            ```

            `PRINT CHR$(72)` prints `H`.

            ```xb
            100 X$=CHR$(33)
            ```

            `X$=CHRS(33)` sets `X$` equal to `"!"`.
        program: |
            For a complete list of all ASCII characters and their corresponding ASCII values,
            run this program.

            ```xb
            100 CALL CLEAR
            110 FOR A=32 TO 95
            120 PRINT A;"""";CHR$(A);"""";
            130 NEXT A
            ```
    CLEAR subprogram:
        format: CALL CLEAR
        description: |
            The `CLEAR` subprogram is used to clear (erase) the entire screen. When the
            `CLEAR` subprogram is called, the space character (ASCII code 32) is placed
            in all positions on the screen.
        program: |
            When the next program is run, the screen is cleared before the
            `PRINT` statements are performed.

            ```xb
            100 CALL CLEAR
            110 PRINT ‚ÄúHELLO THERE!‚Äù
            120 PRINT ‚ÄúHOW ARE YOU?"
            ```

            Screen clears and displays:
            
            ```
            HELLO THERE!
            HOW ARE YOU?
            ```

            If the space character (ASCII code 32) has been redefined by the
            [`CALL CHAR`](#CHAR%20subprogram) subprogram, the screen is filled with
            the new character when `CALL CLEAR` is performed.

            ```xb
            100 CALL CHAR(32,"0103070F1F3F7FFF")
            110 CALL CLEAR
            120 GOTO 120
            ```

            The screen is filled with ‚ó¢ (Press `SHIFT C` to stop the program).
    CLOSE:
        format: "CLOSE #file-number [: DELETE]"
        description: |
            The `CLOSE` statement stops a program's use of the file referenced by
            *#file-number*.
            After the `CLOSE` statement is performed, the file cannot be used by
            the program unless you [`OPEN`](#OPEN) it again.
            The computer no longer associates the *#file-number* with the closed file,
            so you can assign that number to another file.

            When no program is running, the following actions close all open files:
            * Editing the program
            * Entering the [`BYE`](#BYE) command
            * Entering the [`RUN`](#RUN) command
            * Entering the [`NEW`](#NEW) command
            * Entering the [`OLD`](#OLD) command
            * Entering the [`SAVE`](#SAVE) command
            * Entering the [`LIST`](#LIST) command to a device

            If you use `SHIFT Q` (QUIT) to leave TI Extended BASIC, the computer does not
            close any open files, and you may lose data on any files that are open. To
            avoid this possibility. you should leave TI Extended BASIC with [`BYE`](#BYE)
            instead of `SHIFT Q` (QUIT).
        options: |
            You may delete a diskette file at the same time you close it by adding
            "`:DELETE`" to the statement. Other devices, such as cassette recorders, do
            not allow `DELETE`. The manual for each device discusses the use of
            `DELETE`.
        examples: |
            When the computer performs the `CLOSE` statement for a cassette tape
            recorder, you receive instructions for operating the recorder.

            ```xb
            100 OPEN #24:"CS1",INTERNAL,INPUT,FIXED
            .
            .
            .
            -- program lines
            .
            .
            .
            200 CLOSE #24
            ```

            When run, the program displays opening instructions, runs and then displays
            `* PRESS CASSETTE STOP CS1 THEN PRESS ENTER`.

            The `CLOSE` statement for a diskette requires no further action on your part.

            ```xb
            100 OPEN #24:"DSK1.MYDATA",INTERNAL,INPUT,FIXED
            .
            --program lines
            .
            200 CLOSE #24
            ```

            This program runs with no prompt to the user.
    COINC subprogram:
        format: |
            CALL COINC(#sprite-number,#sprite-number,tolerance,numeric-variable)

            CALL COINC{#sprite-number,dot-row,dot-column,tolerance,numeric-variable)

            CALL COINC(ALL,numeric-variable)
        description: |
            The `COINC` subprogram detects a coincidence between a sprite and another
            sprite or a position on the screen. The value returned in *numeric-variable*
            is -1 if there is a coincidence and 0 if there is no coincidence.

            If the keyword `ALL` is given, the coincidence of any two sprites is reported.
            If two sprites are identified by *#sprite-number*, their coincidence is reported.
            If *#sprite-number* and a location are identified, their coincidence is reported.

            If ihe keyword `ALL` is given, sprites are coincident only if one or more of the
            dots which make them up occupy the same position on the screen. If two
            sprites or a sprite and a location are given, then tolerance must be specified,
            and two sprites are coincident if their upper left hand corners are within the
            value specified by tolerance. A sprite and a location are coincident if the
            upper left hand corner of the sprite and the position specified by dot-row and
            doi-column are within the value specified by tolerance. These coincidents are
            reported even if there is no apparent overlap of the sprites or the sprite and
            the position.

            *Dot-row* and *dot-column* are numbered consecutively starting with 1 in the
            upper ieft hand corner of the screen. Thus the *dot-row* can be from 1 to 192
            and the *dot-column* can be from 1 to 256. (Actually the *dot-row* can go up to
            256, but the positions from 193 through 256 are off the bottom of the
            screen.) If any part of the sprite occupies the position given, then there is a
            coincidence.

            Whether or not a coincidence is detected depends on several variables. If the
            sprites are moving very quickly, `COINC` may not be able to detect their
            coincidence. Also, `COINC` checks for a coincidence only when it is called, so a
            program may miss a coincidence that occurs when the program is executing
            some other statement.
        program: |
            This program defines two sprites that consist of a triangle.

            ```xb
            100 CALL CLEAR
            110 S$="0103070F1F3F7FFF"
            120 CALL CHAR(96,S$)
            130 CALL CHAR(100,S$)
            140 CALL SPRITE(#1,96,7,8,8)
            150 CALL SPRITE(#2,100,5,1,1)
            160 CALL COINC(#1,#2,10,C)
            170 PRINT C
            180 CALL COINC(ALL,C)
            190 PRINT C
            ```

            When run, the program outputs -1 and 0.

            Line 160 shows a coincidence because the sprites are within 10
            dots of each other.

            Line 180 shows no coincidence because the shaded areas of the
            sprites are not coincident.
